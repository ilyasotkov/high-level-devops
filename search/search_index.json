{
    "docs": [
        {
            "location": "/", 
            "text": "High-level DevOps\n\n\nDevOps has reportedly become a buzzword to the point that some practioners do not even understand what it really means. It's great that DevOps has become a buzzword, but it should be clear why \nDevOps is valuable\n.\n\n\nThis website presents \nopinionated guide\n to practicing DevOps. Let's discover what problems DevOps can solve and which tools we should use for a best combination of maintainability, scalability, reliability, and security.\n\n\nIntroduction\n\n\nWhat is DevOps? What is the value of DevOps?\n\n\nManaging and developing software\n\n\nDeveloper experience: from idea to push\n\n\nScrum, Lean, Kanban software project management frameworks\n\n\nDelivering software\n\n\nDelivering and deploying software continuously\n\n\nMonitoring software\n\n\nMonitoring and alerting", 
            "title": "Home"
        }, 
        {
            "location": "/#high-level-devops", 
            "text": "DevOps has reportedly become a buzzword to the point that some practioners do not even understand what it really means. It's great that DevOps has become a buzzword, but it should be clear why  DevOps is valuable .  This website presents  opinionated guide  to practicing DevOps. Let's discover what problems DevOps can solve and which tools we should use for a best combination of maintainability, scalability, reliability, and security.", 
            "title": "High-level DevOps"
        }, 
        {
            "location": "/#introduction", 
            "text": "What is DevOps? What is the value of DevOps?", 
            "title": "Introduction"
        }, 
        {
            "location": "/#managing-and-developing-software", 
            "text": "Developer experience: from idea to push  Scrum, Lean, Kanban software project management frameworks", 
            "title": "Managing and developing software"
        }, 
        {
            "location": "/#delivering-software", 
            "text": "Delivering and deploying software continuously", 
            "title": "Delivering software"
        }, 
        {
            "location": "/#monitoring-software", 
            "text": "Monitoring and alerting", 
            "title": "Monitoring software"
        }, 
        {
            "location": "/introduction/", 
            "text": "Business value of DevOps\n\n\nThis article highlights the value of DevOps for businesses, Q\nA-style.\n\n\nQuestion: what problems do enterprises face that DevOps can solve?\n\n\n\n\nCommunication problems between developers (\"hm, but it works on my laptop\")\n\n\nInability to quickly go from commit to release\n\n\nProblems with reliability in production: lack of scalability, frequent downtime, slow response times\n\n\nLate responses to problems in production\n\n\n\n\nTask: draw a diagram for the process of DevOps\n\n\n\n\nTask: describe the process of a software release, step-by-step\n\n\n\n\n\n\nIdea\n\n\n\n\n\n\nPlan\n\n\n\n\n\n\nCode, commit, push to feature-branch\n\n\n\n\n\n\nPipeline:\n\n\n\n\nbuild\n\n\ndeploy\n\n\ntest end-to-end\n\n\n\n\n\n\n\n\nWhen happy, merge pull request into master, then run pipeline:\n\n\n\n\nbuild\n\n\ndeploy\n\n\ntest end-to-end\n\n\n\n\n\n\n\n\nMonitor and respond to alerts when necessary.\n\n\n\n\n\n\nQuestion: who's responsibility is each step?\n\n\nSteps 4 and 5 are done via a CI pipeline.\n\n\nOther steps are done by humans, such as marketing people or engineering people.\n\n\nQuestion: what's the point of DevOps?\n\n\nWith DevOps, we get:\n\n\n\n\nIncreased deployment frequency (feature / hotfix releases)\n\n\nReliable releases that never fail in production\n\n\n\n\nBusiness value:\n\n\n\n\nHappy application developers\n\n\nLess time (on payroll) spent on fixing and maintaining things\n\n\nHappy end customers (requested features and fixes get delivered quicker and reliably)\n\n\nNo PR blunders due to security issues\n\n\n\n\nUp next\n\n\nDeveloper experience: from idea to push", 
            "title": "Business value of DevOps"
        }, 
        {
            "location": "/introduction/#business-value-of-devops", 
            "text": "This article highlights the value of DevOps for businesses, Q A-style.", 
            "title": "Business value of DevOps"
        }, 
        {
            "location": "/introduction/#question-what-problems-do-enterprises-face-that-devops-can-solve", 
            "text": "Communication problems between developers (\"hm, but it works on my laptop\")  Inability to quickly go from commit to release  Problems with reliability in production: lack of scalability, frequent downtime, slow response times  Late responses to problems in production", 
            "title": "Question: what problems do enterprises face that DevOps can solve?"
        }, 
        {
            "location": "/introduction/#task-draw-a-diagram-for-the-process-of-devops", 
            "text": "", 
            "title": "Task: draw a diagram for the process of DevOps"
        }, 
        {
            "location": "/introduction/#task-describe-the-process-of-a-software-release-step-by-step", 
            "text": "Idea    Plan    Code, commit, push to feature-branch    Pipeline:   build  deploy  test end-to-end     When happy, merge pull request into master, then run pipeline:   build  deploy  test end-to-end     Monitor and respond to alerts when necessary.", 
            "title": "Task: describe the process of a software release, step-by-step"
        }, 
        {
            "location": "/introduction/#question-whos-responsibility-is-each-step", 
            "text": "Steps 4 and 5 are done via a CI pipeline.  Other steps are done by humans, such as marketing people or engineering people.", 
            "title": "Question: who's responsibility is each step?"
        }, 
        {
            "location": "/introduction/#question-whats-the-point-of-devops", 
            "text": "With DevOps, we get:   Increased deployment frequency (feature / hotfix releases)  Reliable releases that never fail in production   Business value:   Happy application developers  Less time (on payroll) spent on fixing and maintaining things  Happy end customers (requested features and fixes get delivered quicker and reliably)  No PR blunders due to security issues", 
            "title": "Question: what's the point of DevOps?"
        }, 
        {
            "location": "/introduction/#up-next", 
            "text": "Developer experience: from idea to push", 
            "title": "Up next"
        }, 
        {
            "location": "/development/", 
            "text": "Developer tasks\n\n\nThis article focuses on how project managers, DevOps engineers, and developers\ncan go from an idea to pushing out a Git commit:\n\n\n\n\nIdea\n\n\nPlan\n\n\nCode\n\n\nCommit and push to remote\n\n\n\n\nWhat tools are used during software development?\n\n\nProject management frameworks (Agile)\n\n\n\n\nAgile\n\n\nKanban\n\n\nScrum\n\n\n\n\n\n\nTip\n\n\nRead more about project management frameworks:\n\n\nFrameworks and methodologies of developing and delivering software\n\n\n\n\nTools for generating ideas\n\n\n\n\nWhiteboard\n\n\nPaper and pen\n\n\nMind maps and diagrams\n\n\n\n\nTools for writing project plans\n\n\n\n\nCucumber (feature specifications)\n\n\nGitHub discussions\n\n\nREADMEs for feature proposals\n\n\n\n\nDevOps tools on the Dev side: set up reliable and consistent development environments\n\n\nThe only thing developers should be required to have installed on their workstations is Docker and Docker Compose.\n\n\nIf you use macOS, you should only need the lastest version of \nDocker for Mac\n.\n\n\nIf you use Windows, you should only need the lastest version of \nDocker for Windows\n.\n\n\nThe rest is run on the Docker platform via Docker containers. Usually, in order to start a local server for any kind of web application (in any programming language), just do this:\n\n\ngit clone https://github.com/\n${\nGITHUB_OWNER\n}\n/\n${\nWEB_APP_NAME\n}\n\n\ncd\n \n${\nWEB_APP_NAME\n}\n\ndocker-compose up\n\n\n\n\n\n\nTip\n\n\nI also recommend adding \nalias dc=docker-compose\n to your \n~/.bashrc\n to make it easier to type in:\n\n\ncd\n /path/to/\n${\nWEB_APP_NAME\n}\n \n dc up\n\n\n\n\n\n\nSo, instead of having to install local copies of NodeJS, Ruby, or Python as runtimes for your applications and managing versions through some type of proprietary language version manager, you can manage all of this via a single, transparent and configurable interface of \nDockerfiles\n and \nDocker Compose files\n.\n\n\nDocker containers are awesome because they are \ncheap to create\n -- they require much less resources than creating VMs. That means that all your software can be deployed in container images that you will never have to maintain or fix -- they're killed and recreated instead.\n\n\n\n\nImportant\n\n\nWe don't ever want to \nwaste our time fixing or maintaining things\n, it's a lot easier to just give up on a failed container and create a container using the same container image (that hopefully won't fail any more).\n\n\n\n\n\n\nExample\n\n\nTo find our what happens when you run \ndc up\n, just look inside the Docker Compose file:\n\n\nimage\n:\n \nilyasotkov/rails-react-boilerplate:1.0.0-dev\n\n\n\n\n\nSource: \nhttps://github.com/ilyasotkov/rails-react-boilerplate\n\n\n\n\nTo find out which port your web application is running on, you just have to look inside a straight-forward and transparent API of a Docker Compose file (\ndocker-compose.yaml\n) file.\n\n\nThat means that you can be a developer without managing any of the dependencies for the project -- because the developers (or DevOps engineers) already took care of it in a transparent way (\"Infrastructure as Code\"), via the Dockerfile (container image definition file) and the Docker Compose file (local development environment definition file).\n\n\nTools for authoring code\n\n\n\n\nA text editor (Atom, Vim, Sublime, etc.)\n\n\n\n\nDistributed version control systems\n\n\n\n\nA Git client (Git CLI, GitUp, Sourcetree)\n\n\n\n\n\n\nWhat is the value of learning and using a version control system?\n\n\n\n\nA distributed version control system allows developers to work on any part of the project at the same time\n\n\nAbility to roll back to a previous version of a file or whole project\n\n\nAbility to track changes and who made them\n\n\n\n\n\n\nUp next\n\n\nDelivering software continuously", 
            "title": "Developing software"
        }, 
        {
            "location": "/development/#developer-tasks", 
            "text": "This article focuses on how project managers, DevOps engineers, and developers\ncan go from an idea to pushing out a Git commit:   Idea  Plan  Code  Commit and push to remote", 
            "title": "Developer tasks"
        }, 
        {
            "location": "/development/#what-tools-are-used-during-software-development", 
            "text": "", 
            "title": "What tools are used during software development?"
        }, 
        {
            "location": "/development/#project-management-frameworks-agile", 
            "text": "Agile  Kanban  Scrum    Tip  Read more about project management frameworks:  Frameworks and methodologies of developing and delivering software", 
            "title": "Project management frameworks (Agile)"
        }, 
        {
            "location": "/development/#tools-for-generating-ideas", 
            "text": "Whiteboard  Paper and pen  Mind maps and diagrams", 
            "title": "Tools for generating ideas"
        }, 
        {
            "location": "/development/#tools-for-writing-project-plans", 
            "text": "Cucumber (feature specifications)  GitHub discussions  READMEs for feature proposals", 
            "title": "Tools for writing project plans"
        }, 
        {
            "location": "/development/#devops-tools-on-the-dev-side-set-up-reliable-and-consistent-development-environments", 
            "text": "The only thing developers should be required to have installed on their workstations is Docker and Docker Compose.  If you use macOS, you should only need the lastest version of  Docker for Mac .  If you use Windows, you should only need the lastest version of  Docker for Windows .  The rest is run on the Docker platform via Docker containers. Usually, in order to start a local server for any kind of web application (in any programming language), just do this:  git clone https://github.com/ ${ GITHUB_OWNER } / ${ WEB_APP_NAME }  cd   ${ WEB_APP_NAME } \ndocker-compose up   Tip  I also recommend adding  alias dc=docker-compose  to your  ~/.bashrc  to make it easier to type in:  cd  /path/to/ ${ WEB_APP_NAME }    dc up   So, instead of having to install local copies of NodeJS, Ruby, or Python as runtimes for your applications and managing versions through some type of proprietary language version manager, you can manage all of this via a single, transparent and configurable interface of  Dockerfiles  and  Docker Compose files .  Docker containers are awesome because they are  cheap to create  -- they require much less resources than creating VMs. That means that all your software can be deployed in container images that you will never have to maintain or fix -- they're killed and recreated instead.   Important  We don't ever want to  waste our time fixing or maintaining things , it's a lot easier to just give up on a failed container and create a container using the same container image (that hopefully won't fail any more).    Example  To find our what happens when you run  dc up , just look inside the Docker Compose file:  image :   ilyasotkov/rails-react-boilerplate:1.0.0-dev   Source:  https://github.com/ilyasotkov/rails-react-boilerplate   To find out which port your web application is running on, you just have to look inside a straight-forward and transparent API of a Docker Compose file ( docker-compose.yaml ) file.  That means that you can be a developer without managing any of the dependencies for the project -- because the developers (or DevOps engineers) already took care of it in a transparent way (\"Infrastructure as Code\"), via the Dockerfile (container image definition file) and the Docker Compose file (local development environment definition file).", 
            "title": "DevOps tools on the Dev side: set up reliable and consistent development environments"
        }, 
        {
            "location": "/development/#tools-for-authoring-code", 
            "text": "A text editor (Atom, Vim, Sublime, etc.)", 
            "title": "Tools for authoring code"
        }, 
        {
            "location": "/development/#distributed-version-control-systems", 
            "text": "A Git client (Git CLI, GitUp, Sourcetree)    What is the value of learning and using a version control system?   A distributed version control system allows developers to work on any part of the project at the same time  Ability to roll back to a previous version of a file or whole project  Ability to track changes and who made them", 
            "title": "Distributed version control systems"
        }, 
        {
            "location": "/development/#up-next", 
            "text": "Delivering software continuously", 
            "title": "Up next"
        }, 
        {
            "location": "/delivery/", 
            "text": "Delivering software continuously\n\n\nThis article highlights the value of delivering software continuously.\n\n\n\n\nBuild container image\n\n\nDeploy container image into a testing cloud environment\n\n\nTest reliability\n\n\nIf tests are passed, deploy into production\n\n\n\n\nBuild container images\n\n\nContainers (Docker containers) allow us to run software predictably on any workstation and in any cloud environment.\n\n\nThe first step upon pushing source code into a remote version control repository is to build the image, or convert source code (Dockerfile) into executable machine code (Docker container image).\n\n\nDeploy container images into a testing deployment environment\n\n\nOnce the image is built, we deploy the software into a deployment environment that simulates production so that we can test its reliability.\n\n\nTest software's reliabilty\n\n\nReliability is tested via unit tests (low-level tests) and integration tests (end-to-end, high-level tests).\n\n\nScalability and security should be tested as well.\n\n\nDeploy into production\n\n\nIf the release candidate meets our quality requirements, we are ready to ship it into production, which is the deployment environment our end customers can access.\n\n\nUp next\n\n\nMonitoring and alerting", 
            "title": "Delivering software"
        }, 
        {
            "location": "/delivery/#delivering-software-continuously", 
            "text": "This article highlights the value of delivering software continuously.   Build container image  Deploy container image into a testing cloud environment  Test reliability  If tests are passed, deploy into production", 
            "title": "Delivering software continuously"
        }, 
        {
            "location": "/delivery/#build-container-images", 
            "text": "Containers (Docker containers) allow us to run software predictably on any workstation and in any cloud environment.  The first step upon pushing source code into a remote version control repository is to build the image, or convert source code (Dockerfile) into executable machine code (Docker container image).", 
            "title": "Build container images"
        }, 
        {
            "location": "/delivery/#deploy-container-images-into-a-testing-deployment-environment", 
            "text": "Once the image is built, we deploy the software into a deployment environment that simulates production so that we can test its reliability.", 
            "title": "Deploy container images into a testing deployment environment"
        }, 
        {
            "location": "/delivery/#test-softwares-reliabilty", 
            "text": "Reliability is tested via unit tests (low-level tests) and integration tests (end-to-end, high-level tests).  Scalability and security should be tested as well.", 
            "title": "Test software's reliabilty"
        }, 
        {
            "location": "/delivery/#deploy-into-production", 
            "text": "If the release candidate meets our quality requirements, we are ready to ship it into production, which is the deployment environment our end customers can access.", 
            "title": "Deploy into production"
        }, 
        {
            "location": "/delivery/#up-next", 
            "text": "Monitoring and alerting", 
            "title": "Up next"
        }, 
        {
            "location": "/monitoring/", 
            "text": "Monitoring and alerting\n\n\nOnce your software is running in a production environment, our job is finished! Well, not quite.\n\n\nIdeally, we don't ever want to face failure in production, because that's what staging environments are for. We don't live in an ideal world though. So, in case a mistake happens, we want to:\n\n\n\n\nQuickly get notified of the problem\n\n\nQuickly fix the problem\n\n\n\n\nMonitoring\n\n\nMonitoring is done to predict and prevent systems failure. It also helps us understand how our systems work.\n\n\nAlerting\n\n\nIt would be expensive and boring to spend all day staring at a monitoring system. Human resources should focus on adding value to the system, not maintaining it. That's why our deployments must have health checks and auto-healing features enabled.\n\n\nBut when the system cannot fix itself, an alerting system will make sure there's no delay between (imminent) failure and human intervention.", 
            "title": "Monitoring software"
        }, 
        {
            "location": "/monitoring/#monitoring-and-alerting", 
            "text": "Once your software is running in a production environment, our job is finished! Well, not quite.  Ideally, we don't ever want to face failure in production, because that's what staging environments are for. We don't live in an ideal world though. So, in case a mistake happens, we want to:   Quickly get notified of the problem  Quickly fix the problem", 
            "title": "Monitoring and alerting"
        }, 
        {
            "location": "/monitoring/#monitoring", 
            "text": "Monitoring is done to predict and prevent systems failure. It also helps us understand how our systems work.", 
            "title": "Monitoring"
        }, 
        {
            "location": "/monitoring/#alerting", 
            "text": "It would be expensive and boring to spend all day staring at a monitoring system. Human resources should focus on adding value to the system, not maintaining it. That's why our deployments must have health checks and auto-healing features enabled.  But when the system cannot fix itself, an alerting system will make sure there's no delay between (imminent) failure and human intervention.", 
            "title": "Alerting"
        }, 
        {
            "location": "/development/frameworks/", 
            "text": "Frameworks for developing software\n\n\n\n\nWarning\n\n\nThis summary was written without full understanding or practical experience in using the frameworks.\n\n\n\n\nScrum\n\n\n\n\nFigure credit: \nhttps://www.scrumalliance.org/why-scrum\n \n\n\nKey concepts\n: product owner, team, product backlog, sprint backlog\n\n\nLean\n\n\nKey concepts\n: valuable feature, prioritization, small-batch delivery\n\n\nKanban\n\n\nKey concepts\n: workflow, work in progress limitation, backlog prioritization", 
            "title": "Frameworks"
        }, 
        {
            "location": "/development/frameworks/#frameworks-for-developing-software", 
            "text": "Warning  This summary was written without full understanding or practical experience in using the frameworks.", 
            "title": "Frameworks for developing software"
        }, 
        {
            "location": "/development/frameworks/#scrum", 
            "text": "Figure credit:  https://www.scrumalliance.org/why-scrum    Key concepts : product owner, team, product backlog, sprint backlog", 
            "title": "Scrum"
        }, 
        {
            "location": "/development/frameworks/#lean", 
            "text": "Key concepts : valuable feature, prioritization, small-batch delivery", 
            "title": "Lean"
        }, 
        {
            "location": "/development/frameworks/#kanban", 
            "text": "Key concepts : workflow, work in progress limitation, backlog prioritization", 
            "title": "Kanban"
        }
    ]
}